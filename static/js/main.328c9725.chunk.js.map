{"version":3,"sources":["api/unsplash.js","components/WeatherInfo.jsx","api/openweather.js","api/geocode.js","components/SearchBar.jsx","App.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","Forecast","props","className","temp","feelsLike","maxTemp","minTemp","id","city","forecastInfo","getWeather","a","get","response","getCityName","coords","params","auth","locate","json","data","region","SearchBar","onSubmit","searchSubmit","type","value","searchValue","placeholder","onChange","search","autoComplete","App","useState","term","setTerm","image","images","setImage","weather","setWeather","navigator","geolocation","getCurrentPosition","position","currentLat","latitude","currentLon","longitude","currentCoords","cityName","currentWeather","console","log","main","Math","floor","feels_like","temp_min","temp_max","getImage","unsplash","query","randImage","random","undefined","results","imageBg","urls","regular","then","weatherResponse","cityCoodsLat","coord","lat","cityCoodsLon","lon","cityCoordsAll","catch","err","alert","style","backgroundImage","e","preventDefault","target","ReactDOM","render","document","getElementById"],"mappings":"mUAEeA,MAAMC,OAAO,CAC1BC,QAAS,2BACTC,QAAS,CACPC,cAAe,uBCqBJC,G,MAtBE,SAACC,GACd,OACI,yBAAKC,UAAU,YACX,yBAAKA,UAAU,kBACX,wBAAIA,UAAU,eACV,qCAAU,yBAAKA,UAAU,QAAQD,EAAME,OACvC,0DAAsB,yBAAKD,UAAU,QAAQD,EAAMG,YACnD,0CAAY,yBAAKF,UAAU,QAAQD,EAAMI,UACzC,0CAAY,yBAAKH,UAAU,QAAQD,EAAMK,UACzC,6BACA,wBAAIC,GAAG,QAAQN,EAAMO,QAI7B,6BACKP,EAAMQ,iBCRRC,EARC,uCAAG,WAAOF,GAAP,eAAAG,EAAA,sEACQhB,IAAMiB,IAAN,4DAA+DJ,EAA/D,6BADR,cACTK,EADS,yBAGXA,GAHW,2CAAH,sDCgBDC,EAfE,uCAAG,WAAOC,GAAP,iBAAAJ,EAAA,6DACZK,EAAU,CACVC,KAAM,oBACNC,OAAQH,EACRI,KAAM,KAJM,SAMOxB,IAAMiB,IAAI,sBAAuB,CAACI,WANzC,cAMVH,EANU,yBAOTA,EAASO,KAAKC,QAPL,2CAAH,sDCkBFC,G,MAnBG,SAACrB,GACf,OACI,yBAAKC,UAAU,aACX,0BAAMqB,SAAUtB,EAAMuB,cAClB,6BACI,2BACIjB,GAAG,SACHkB,KAAK,OACLC,MAAOzB,EAAM0B,YACbC,YAAY,2BACZC,SAAU5B,EAAM6B,OAChBC,aAAa,a,MCgHtBC,MAtHf,WAAgB,IAAD,EACWC,mBAAS,CAC/BC,KAAM,KAFK,mBACNA,EADM,KACAC,EADA,OAIcF,mBAAS,CAClCG,MAAO,KALI,mBAINC,EAJM,KAIEC,EAJF,OAQiBL,mBAAS,CACrC9B,KAAM,MACNC,UAAW,MACXE,QAAS,MACTD,QAAS,MACTG,KAAM,KAbK,mBAQN+B,EARM,KAQGC,EARH,KAkBXC,UAAUC,YAAYC,mBAAtB,uCAAyC,WAAgBC,GAAhB,uBAAAjC,EAAA,6DACnCkC,EAAaD,EAAS7B,OAAO+B,SAC7BC,EAAaH,EAAS7B,OAAOiC,UAC7BC,EAHmC,UAGhBJ,EAHgB,YAGFE,GAHE,SAIhBjC,EAAYmC,GAJI,cAIjCC,EAJiC,gBAKVxC,EAAWwC,GALD,OAKjCC,EALiC,OAMvCC,QAAQC,IAAIF,EAAe/B,KAAKkC,MACX,KAAjBf,EAAQ/B,MACVgC,EAAW,CACTrC,KAAMoD,KAAKC,MAAML,EAAe/B,KAAKkC,KAAKnD,KAAO,QAAU,QAC3DC,UAAWmD,KAAKC,MAAML,EAAe/B,KAAKkC,KAAKG,WAAa,QAAU,QACtEnD,QAASiD,KAAKC,MAAML,EAAe/B,KAAKkC,KAAKI,SAAW,QAAU,QAClErD,QAASkD,KAAKC,MAAML,EAAe/B,KAAKkC,KAAKK,SAAW,QAAU,QAClEnD,KAAM0C,IAGVE,QAAQC,IAAIH,GAhB2B,4CAAzC,uDA6BF,IAIMU,EAAQ,uCAAG,gCAAAjD,EAAA,sEACQkD,EAASjD,IAAI,iBAAkB,CACpDI,OAAQ,CAAE8C,MAAO5B,EAAKA,QAFT,OACTrB,EADS,OAITkD,EAAYR,KAAKC,MAAsB,GAAhBD,KAAKS,eAIOC,IAArCpD,EAASO,KAAK8C,QAAQH,KACxBI,EAAUtD,EAASO,KAAK8C,QAAQH,GAAWK,KAAKC,SAElD/B,EAAS,CAAEF,MAAO+B,IAElBzD,EAAWwB,EAAKA,MAAMoC,KAAtB,uCAA2B,WAAMlD,GAAN,uBAAAT,EAAA,6DACnB4D,EAAkBnD,EAAKA,KAAKkC,KAC5BkB,EAAepD,EAAKA,KAAKqD,MAAMC,IAC/BC,EAAevD,EAAKA,KAAKqD,MAAMG,IAE/BC,EALmB,UAKAL,EALA,aAKiBG,EALjB,cAMF7D,EAAY+D,GANV,OAMnB3B,EANmB,OAQzBV,EAAW,CACTrC,KAAMoD,KAAKC,MAAMe,EAAgBpE,KAAO,QAAU,QAClDC,UAAWmD,KAAKC,MAAMe,EAAgBd,WAAa,QAAU,QAC7DnD,QAASiD,KAAKC,MAAMe,EAAgBb,SAAW,QAAU,QACzDrD,QAASkD,KAAKC,MAAMe,EAAgBZ,SAAW,QAAU,QACzDnD,KAAM0C,IAbiB,2CAA3B,uDAgBG4B,OAAM,SAAAC,GACPC,MAAMD,MA9BO,2CAAH,qDA6Cd,OACE,yBAAK7E,UAAU,uBAAuB+E,MAAO,CAAEC,gBAAgB,OAAD,OAAS7C,EAAOD,MAAhB,OAC5D,yBAAKlC,UAAU,OAEb,wBAAIK,GAAG,SAAP,eACA,kBAAC,EAAD,CACEJ,KAAMoC,EAAQpC,KACdC,UAAWmC,EAAQnC,UACnBE,QAASiC,EAAQjC,QACjBD,QAASkC,EAAQlC,QACjBG,KAAM+B,EAAQ/B,OAEhB,kBAAC,EAAD,CACEgB,aApBS,SAAC2D,GAChBA,EAAEC,iBACFxB,KAmBM9B,OA/Da,SAACqD,GACpBhD,EAAQ,CAAED,KAAMiD,EAAEE,OAAO3D,cCnD7B4D,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.328c9725.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nexport default axios.create({\r\n  baseURL: 'https://api.unsplash.com',\r\n  headers: {\r\n    Authorization: 'APIAuthentication'\r\n  }\r\n})","import React from 'react'\r\nimport './WeatherInfo.css'\r\n\r\n\r\nconst Forecast = (props) => {\r\n    return (\r\n        <div className='forecast'>\r\n            <div className='currentWeather'>\r\n                <ul className='contentList'>\r\n                    <li>Temp: <div className='temp'>{props.temp}</div></li>\r\n                    <li>Sensação Térmica: <div className='temp'>{props.feelsLike}</div></li>\r\n                    <li>Máxima: <div className='temp'>{props.maxTemp}</div></li>\r\n                    <li>Mínima: <div className='temp'>{props.minTemp}</div></li>\r\n                    <br></br>\r\n                    <li id='city'>{props.city}</li>\r\n                </ul>\r\n\r\n            </div>\r\n            <div>\r\n                {props.forecastInfo}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Forecast","import axios from 'axios'\r\n\r\n\r\nconst getWeather = async (city) => {\r\n    const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=APIAuthentication`)\r\n    return (\r\n        response\r\n    )\r\n}\r\n\r\n\r\nexport default getWeather","import axios from 'axios'\r\n//const axios =  require('axios');\r\n\r\n\r\nconst getCityName = async (coords) => {\r\n    let params =  {\r\n        auth: 'APIAuthentication',\r\n        locate: coords,\r\n        json: '1'\r\n      }\r\n    const response = await axios.get('https://geocode.xyz', {params})\r\n    return response.data.region\r\n}\r\n\r\n\r\n// getCityName('-25.3608418,-49.0918268').then(cityName => {\r\n//     console.log(cityName)\r\n// })\r\n\r\nexport default getCityName","import React from 'react'\r\nimport './SearchBar.css'\r\n\r\nconst SearchBar = (props) => {\r\n    return (\r\n        <div className='searchBar'>\r\n            <form onSubmit={props.searchSubmit}>\r\n                <div>\r\n                    <input \r\n                        id='search'\r\n                        type='text'\r\n                        value={props.searchValue}\r\n                        placeholder='Buscar localização'\r\n                        onChange={props.search}\r\n                        autoComplete='off'\r\n                    />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar","import React, { useState } from 'react';\r\nimport unsplash from './api/unsplash'\r\nimport Forecast from './components/WeatherInfo'\r\nimport getWeather from './api/openweather'\r\nimport getCityName from './api/geocode'\r\nimport SearchBar from './components/SearchBar'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [term, setTerm] = useState({\r\n    term: ''\r\n  })\r\n  const [images, setImage] = useState({\r\n    image: ''\r\n  })\r\n\r\n  const [weather, setWeather] = useState({\r\n    temp: '...',\r\n    feelsLike: '...',\r\n    minTemp: '...',\r\n    maxTemp: '...',\r\n    city: ''\r\n  })\r\n\r\n\r\n  const test = () => {\r\n    navigator.geolocation.getCurrentPosition(async function (position) {\r\n      let currentLat = position.coords.latitude\r\n      let currentLon = position.coords.longitude\r\n      let currentCoords = `${currentLat},${currentLon}`\r\n      const cityName = await getCityName(currentCoords)\r\n      const currentWeather = await getWeather(cityName)\r\n      console.log(currentWeather.data.main)\r\n      if (weather.city === '') {\r\n        setWeather({\r\n          temp: Math.floor(currentWeather.data.main.temp - 273.15) + 'ºC',\r\n          feelsLike: Math.floor(currentWeather.data.main.feels_like - 273.15) + 'ºC',\r\n          minTemp: Math.floor(currentWeather.data.main.temp_min - 273.15) + 'ºC',\r\n          maxTemp: Math.floor(currentWeather.data.main.temp_max - 273.15) + 'ºC',\r\n          city: cityName\r\n        })\r\n      }\r\n      console.log(cityName)\r\n    })\r\n  }\r\n\r\ntest()\r\n \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleSearch = (e) => {\r\n    setTerm({ term: e.target.value })\r\n  }\r\n\r\n  const getImage = async () => {\r\n    const response = await unsplash.get('/search/photos', {\r\n      params: { query: term.term }\r\n    })\r\n    const randImage = Math.floor(Math.random() * 11)\r\n\r\n    let imageBg\r\n\r\n    if (response.data.results[randImage] !== undefined) {\r\n      imageBg = response.data.results[randImage].urls.regular\r\n    }\r\n    setImage({ image: imageBg })\r\n\r\n    getWeather(term.term).then(async data => {\r\n      const weatherResponse = data.data.main\r\n      const cityCoodsLat = data.data.coord.lat\r\n      const cityCoodsLon = data.data.coord.lon\r\n\r\n      const cityCoordsAll = `${cityCoodsLat}, ${cityCoodsLon} `\r\n      const cityName = await getCityName(cityCoordsAll)\r\n      // console.log(cityName)\r\n      setWeather({\r\n        temp: Math.floor(weatherResponse.temp - 273.15) + 'ºC',\r\n        feelsLike: Math.floor(weatherResponse.feels_like - 273.15) + 'ºC',\r\n        minTemp: Math.floor(weatherResponse.temp_min - 273.15) + 'ºC',\r\n        maxTemp: Math.floor(weatherResponse.temp_max - 273.15) + 'ºC',\r\n        city: cityName\r\n      })\r\n\r\n    }).catch(err => {\r\n      alert(err)\r\n    })\r\n\r\n  }\r\n\r\n\r\n\r\n\r\n  const onSearch = (e) => {\r\n    e.preventDefault()\r\n    getImage()\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <div className='bg-wrapper fadeImage' style={{ backgroundImage: `url(${images.image})` }}>\r\n      <div className=\"App\">\r\n\r\n        <h1 id='title'>Clima Agora</h1>\r\n        <Forecast\r\n          temp={weather.temp}\r\n          feelsLike={weather.feelsLike}\r\n          minTemp={weather.minTemp}\r\n          maxTemp={weather.maxTemp}\r\n          city={weather.city}\r\n        />\r\n        <SearchBar\r\n          searchSubmit={onSearch}\r\n          search={handleSearch}\r\n        />\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}